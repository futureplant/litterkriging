c("from", "to", "becomes")))
r<- reclassify(r,classmatrix,include.lowest=T)
return(r)
}
b <- brick(system.file("external/rlogo.grd", package="raster"))
maxed <- findMaxLayer(b)
maxed
plot(maxed)
# dummy data
findMaxLayer <- function(rasterbrick){
r <- which.min(rasterbrick)
classmatrix <-  matrix(c(1:3), nrow = 1, ncol = 3,
dimnames = list(c("cat1"),
c("from", "to", "becomes")))
r<- reclassify(r,classmatrix,include.lowest=F)
return(r)
}
b <- brick(system.file("external/rlogo.grd", package="raster"))
maxed <- findMaxLayer(b)
plot(maxed)
# dummy data
findMaxLayer <- function(rasterbrick){
r <- which.min(rasterbrick)
classmatrix <-  matrix(c(2,2,3), nrow = 1, ncol = 3,
dimnames = list(c("cat1"),
c("from", "to", "becomes")))
r<- reclassify(r,classmatrix,include.lowest=T)
return(r)
}
b <- brick(system.file("external/rlogo.grd", package="raster"))
maxed <- findMaxLayer(b)
# Libraries & Imports ################
library(sp)
library(gstat)
library(raster)
library(gsheet)
library(stars)
library(rgdal)
library(automap)
source('scripts/getdataframe.R')
library(automap)
install.packages('automap')
# Libraries & Imports ################
library(sp)
library(gstat)
# Libraries & Imports ################
library(sp)
library(gstat)
library(raster)
library(gsheet)
library(stars)
library(rgdal)
library(automap)
source('scripts/getdataframe.R')
source('scripts/getpoints.R')
source('scripts/variogramkriging.R')
# Get data from google sheets
sampledata <- getDataFrame('https://docs.google.com/spreadsheets/d/1MyHRcpDJX2iro6a_2nk0mOJBRSm_x0lpkLH04IoKJII/edit?usp=sharing')
sampledata$lon <- as.numeric(sub(".*,", "", sampledata$Coordinates))
sampledata$lat <- as.numeric(sub(",.*", "", sampledata$Coordinates))
# Turn data frame into sp object
coordinates(sampledata) <- ~lon+lat
proj4string(sampledata) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
# Turn data into spatial object (sf)
sampledata <- st_as_sf(sampledata)
sampledata <- st_transform(sampledata, crs =28992)
# Work only with kriging points (not validation or bias data)
sampledata <- sampledata[sampledata$point_id < 200,]
sampledata <- sampledata[sampledata$total < 40,]
# Exploratory analysis
hist(sampledata$total, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,30,40,50))
summary(sampledata)
# Prepare indicator kriging variables
sampledata$category_zero <- ifelse(sampledata$total > 0, 1, 0)
sampledata$category_one <- ifelse(sampledata$total >= 1 & sampledata$total <= 2, 1, 0)
sampledata$category_two <- ifelse(sampledata$total >= 3 & sampledata$total <= 4, 1, 0)
sampledata$category_three <- ifelse(sampledata$total >= 5 & sampledata$total <= 6, 1, 0)
sampledata$category_four <- ifelse(sampledata$total >= 7, 1, 0)
sampledata <- as(sampledata, 'Spatial')
# Study area for kriging (new_data)
study_area <- readOGR(dsn = "data", layer = "mapping_area_groenlo")
crs(study_area) <- crs(sampledata)
area_raster <- raster(extent(study_area), resolution = c(10,10))
crs(area_raster) <- crs(sampledata)
area_raster <- as(area_raster, 'SpatialGrid')
kriglist_zero <- variogram_kriging(category_zero~1, sampledata, area_raster)
vgm_zero <- kriglist_zero[[1]]
cv_zero <- kriglist_zero[[2]]
krig_zero <- kriglist_zero[[3]]
kriglist_one <- variogram_kriging(category_one~1, sampledata, area_raster)
vgm_one <- kriglist_one[[1]]
cv_one <- kriglist_one[[2]]
krig_one <- kriglist_one[[3]]
kriglist_two <- variogram_kriging(category_two~1, sampledata, area_raster)
vgm_two <- kriglist_two[[1]]
cv_two <- kriglist_two[[2]]
krig_two <- kriglist_two[[3]]
kriglist_three <- variogram_kriging(category_three~1, sampledata, area_raster)
vgm_three <- kriglist_three[[1]]
cv_three <- kriglist_three[[2]]
krig_three <- kriglist_three[[3]]
kriglist_four <- variogram_kriging(category_four~1, sampledata, area_raster)
vgm_four <- kriglist_four[[1]]
cv_four <- kriglist_four[[2]]
krig_four <- kriglist_four[[3]]
# Make semivariogram
glitter <- gstat(formula = total ~ 1, data = sampledata)
vglitter <- variogram(glitter, boundaries = c(70, 125, 175, 300, 400, 500, 600, 800, 1000, 1500))
vglitter
plot(vglitter, plot.numbers = T)
vgmlitter <- vgm(nugget = 2, psill = 12, range = 350, model = 'Exp')
vgmlitter <- fit.variogram(vglitter, vgmlitter)
spplot(krig_four,zcol='var1.pred')
?raster
layers <- c(kriglist_zero,kriglist_one,krig_two,kriglist_three,krig_four)
layers <- c(krig_zero,krig_one,krig_two,krig_three,krig_four)
class(krig_zero)
for (layer in layers){
layer <- raster(layer())
}
for (layer in layers){
layer <- raster(layer)
}
class(krig_zero)
layer
krig_zero <- raster(kriglist_zero[[3]])
krig_zero
krig_zero <- raster(kriglist_zero[[3]])
krig_one <- raster(rasterkriglist_one[[3]])
kriglist_one <- variogram_kriging(category_one~1, sampledata, area_raster)
?brick
krigebrick <- brick(krig_one,krig_two,krig_three,krig_four)
krigebrick <- brick(c(krig_one,krig_two,krig_three,krig_four))
krigebrick <- brick(c(krig_zero,krig_one,krig_two,krig_three,krig_four))
krig_zero
krig_four
krig_zero <- raster(kriglist_zero[[3]])
krig_one <- raster(kriglist_one[[3]])
krig_three <- raster(kriglist_three[[3]])
krig_four <- raster(kriglist_four[[3]])
krigebrick <- brick(c(krig_zero,krig_one,krig_two,krig_three,krig_four))
krig_one
class(krig_two)
krig_two <- raster(kriglist_two[[3]])
class(krig_two)
krig_three <- raster(kriglist_three[[3]])
krig_four <- raster(kriglist_four[[3]])
krigebrick <- brick(c(krig_zero,krig_one,krig_two,krig_three,krig_four))
class(krigebrick)
krigebrick
ggplot(krigebrick, zcol='var1.pred1')
spplot(krigebrick, zcol='var1.pred1')
plot(krigebrick)
source('scripts/indicatorselection.R')
max_layer <- findMaxLayer(krigebrick)
plot(max_layer)
summary(max_layer)
source('scripts/indicatorselection.R')
max_layer <- findMaxLayer(krigebrick)
max_layer
plot(max_layer)
b <- brick(system.file("external/rlogo.grd", package="raster"))
maxed <- findMaxLayer(b)
maxed
plot(maxed)
b <- brick(system.file("external/rlogo.grd", package="raster"))
maxed <- findMaxLayer(b)
plot(maxed)
# dummy data
findMaxLayer <- function(rasterbrick){
r <- which.max(rasterbrick)
# classmatrix <-  matrix(c(2,2,3), nrow = 1, ncol = 3,
#                   dimnames = list(c("cat1"),
#                                   c("from", "to", "becomes")))
#r<- reclassify(r,classmatrix,include.lowest=T)
return(r)
}
b <- brick(system.file("external/rlogo.grd", package="raster"))
maxed <- findMaxLayer(b)
maxed
plot(maxed)
source('scripts/indicatorselection.R')
source('scripts/indicatorselection.R')
max_layer <- findMaxLayer(krigebrick)
plot(max_layer)
# Prepare indicator kriging variables
sampledata$category_zero <- ifelse(sampledata$total > 0, 0, 1)
kriglist_zero <- variogram_kriging(category_zero~1, sampledata, area_raster)
vgm_zero <- kriglist_zero[[1]]
cv_zero <- kriglist_zero[[2]]
krig_zero <- raster(kriglist_zero[[3]])
krigebrick <- brick(c(krig_zero,krig_one,krig_two,krig_three,krig_four))
max_layer <- findMaxLayer(krigebrick)
plot(krigebrick)
max_layer <- findMaxLayer(krigebrick)
plot(max_layer)
litter_krig_rast <- raster(litter_krig)
roadnetwork <- readOGR(dsn = 'data', layer = 'c03_osm_roads_buffer_Dissolve')
final <- mask(max_layer, roadnetwork)
# Visualize
spplot(final, zcol = 'var1.pred')
names(final)
# Visualize
plot(final)
?plot
# Visualize
plot(final, col='rainbow')
# Visualize
plot(final)
object.size(final)
writeRaster(final, 'output/litter_total_indicatorkriging', format = 'GTiff')
library(leaflet)
library(leaflet)
library(raster)
tot <- raster('output/litter_total_indicatorkriging.tif')
plot(tot)
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(tot),
na.color = "transparent")
leaflet() %>% addTiles() %>%
addRasterImage(r, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(r),
title = "Surface temp")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
leaflet() %>% addTiles() %>%
addRasterImage(r, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(r),
title = "Surface temp")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addTiles() %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
pal <- colorNumeric(c("#D0FF92","#F10F50"), values(tot),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addTiles() %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>%  addProviderTiles(providers$CartoDB.Positron)
leaflet() %>% addTiles() %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
m %>%
leaflet() %>% m %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>%
leaflet() %>% m %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
m %>% leaflet() %>% m %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>%  addProviderTiles(providers$CartoDB.Positron)
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>%  addProviderTiles(providers$CartoDB.Positron)
leaflet() %>% m %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
tot <- raster('output/litter_total_indicatorkriging.tif')
pal <- colorNumeric(c("#D0FF92","#F10F50"), values(tot),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>%  addProviderTiles(providers$CartoDB.Positron)
leaflet() %>% m %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% leaflet() %>% m %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
m %>%  addProviderTiles(providers$CartoDB.Positron)
leaflet() %>% m %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
m %>% addTiles()
leaflet() %>% addTiles() %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
pal <- colorNumeric(c("#D0FF92", "#41B6C4", "#FFFFCC", "#FFFFCC", "#FFFFCC"), values(tot),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addTiles() %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
pal <- colorNumeric(c("#D0FF92", "#41B6C4", "#FFFFCC", "#FFFFCC", "#FFFFCC", "#FFFFCC"), values(tot),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addTiles() %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addTiles() %>%
addRasterImage(tot, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
# Libraries & Imports ################
library(sp)
library(gstat)
library(raster)
library(gsheet)
library(stars)
library(rgdal)
library(automap)
source('scripts/getdataframe.R')
source('scripts/getpoints.R')
source('scripts/variogramkriging.R')
source('scripts/indicatorselection.R')
# Retrieve and preprocess data ######################
# Get data from google sheets
sampledata <- getDataFrame('https://docs.google.com/spreadsheets/d/1MyHRcpDJX2iro6a_2nk0mOJBRSm_x0lpkLH04IoKJII/edit?usp=sharing')
sampledata$lon <- as.numeric(sub(".*,", "", sampledata$Coordinates))
sampledata$lat <- as.numeric(sub(",.*", "", sampledata$Coordinates))
# Turn data frame into sp object
coordinates(sampledata) <- ~lon+lat
proj4string(sampledata) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
# Visual check if all points are on road network
# roads <- getPoints("data/osm_roads_aoi_wgs84.shp")
# plot(sampledata)
# plot(roads, add=T)
# Turn data into spatial object (sf)
sampledata <- st_as_sf(sampledata)
sampledata <- st_transform(sampledata, crs =28992)
# Work only with kriging points (not validation or bias data)
sampledata <- sampledata[sampledata$point_id < 200,]
sampledata <- sampledata[sampledata$total < 40,]
# Exploratory analysis
hist(sampledata$total, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,30,40,50))
summary(sampledata)
# Prepare indicator kriging variables
sampledata$category_zero <- ifelse(sampledata$total > 0, 0, 1)
sampledata$category_one <- ifelse(sampledata$total >= 1 & sampledata$total <= 2, 1, 0)
sampledata$category_two <- ifelse(sampledata$total >= 3 & sampledata$total <= 4, 1, 0)
sampledata$category_three <- ifelse(sampledata$total >= 5 & sampledata$total <= 6, 1, 0)
sampledata$category_four <- ifelse(sampledata$total >= 7, 1, 0)
sampledata <- as(sampledata, 'Spatial')
# Study area for kriging (new_data)
study_area <- readOGR(dsn = "data", layer = "mapping_area_groenlo")
crs(study_area) <- crs(sampledata)
area_raster <- raster(extent(study_area), resolution = c(1,1))
crs(area_raster) <- crs(sampledata)
area_raster <- as(area_raster, 'SpatialGrid')
roadnetwork <- readOGR(dsn = 'data', layer = 'c03_osm_roads_buffer_Dissolve')
# Indicator Kriging #####################
kriglist_zero <- variogram_kriging(category_zero~1, sampledata, area_raster)
source('D:/GIS Files/litterkriging/main.R')
tot <- raster('output/litter_total_indicatorkriging.tif')
pal <- colorNumeric(c("#D0FF92", "#F10F50"), values(tot),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addTiles() %>%
addRasterImage(tot, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
tot <- raster('output/litter_total_indicatorkriging.tif')
tot
writeRaster(final, 'output/litter_total_indicatorkriging.tif', format = 'GTiff')
writeRaster(final, 'output/litter_total_indicatorkriging.tif', format = 'GTiff',overwrite=T)
tot <- raster('output/litter_total_indicatorkriging.tif')
pal <- colorNumeric(c("#D0FF92", "#F10F50"), values(tot),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addTiles() %>%
addRasterImage(tot, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
pal <- colorNumeric(c("#D0FF92", "#F10F50"), values(tot),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addTiles() %>%
addRasterImage(tot, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
addLegend
m %>% addTiles()
leaflet() %>% addTiles() %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
pal <- colorNumeric(c("#D0FF92", "#F10F50"), values(1:5),
na.color = "transparent")
pal <- colorNumeric(c("#D0FF92", "#F10F50"), values(c(1:5)),
na.color = "transparent")
pal <- colorNumeric(c("#D0FF92", "#F10F50"), values(tot),
na.color = "transparent")
tot <- raster('output/litter_total_indicatorkriging.tif')
pal <- colorNumeric(c("#D0FF92", "#F10F50"), values(tot),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addTiles() %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
summary(tot)
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
pal <- colorNumeric(c("#32C8EB", "#F10F50"), values(tot),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
min(tot)
plot(max_layer)
pal <- colorNumeric(c("#32C8EB", "#F10F50"), values(max_layer),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(max_layer, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(max_layer),
title = "Litter")
?colorNumeric
pal <- colorBin("Greens", domain = 0:100)
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(max_layer, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(max_layer),
title = "Litter")
pal <- colorBin("Greens", domain = 0:5)
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(max_layer, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(max_layer),
title = "Litter")
tot <- raster('output/litter_total_indicatorkriging.tif')
pal <- colorNumeric(c("#D0FF92", "#F10F50"), values(tot),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
pal <- colorBin("Greens", domain = 0:6)
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
pal <- colorBin("Greens", domain = 0:6, na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
pal <- colorBin("Reds", domain = 0:6, na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(max_layer, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
plot(max_layer)
plot(tot)
writeRaster(max_layer, 'output/max_layer', format = 'GTiff')
writeRaster(tot, 'output/tot', format = 'GTiff')
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, opacity = 0.8) %>%
addLegend(pal = pal, values = values(tot),
title = "Litter")
pal <- colorBin("Reds", domain = 0:6, na.color = "transparent")
m <- leaflet() %>% setView(lng = 6.643071, lat = 52.030869, zoom = 12)
m %>% addTiles()
leaflet() %>% addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(tot, opacity = 0.8)
source('D:/GIS Files/litterkriging/main.R')
warnings()
