m1 = mle2(y~dnbinom(mu = a * b * x/ (b+x), size = k),
parameters = list(a~g, b~g),
start = list(a=15, b=1, k=5), data = dat1 )
pval[i] = anova(m0, m1)[2, 'Pr(>Chisq)']
}
power_hyper = sum(pval<0.05)/length(pval)
power_hyper
library(stats4)
library(bbmle)
g = factor(rep(1:2, each=25))
a = c(20, 10)
b = c(1, 2)
k = 5
x = runif(50, min=0, max=5)
y_det = a[g]*b[g]/(b[g] + x)
y = rnbinom(50, mu = y_det, size = k)
y
dat1 = data.frame(x,y,g)
m0 = mle2(y~dnbinom(mu = a * b * x/ (b + x), size = k),
start = list(a=15, b=1, k=5), data = dat1 )
m1 = mle2(y~dnbinom(mu = a * b * x/ (b+x), size = k),
parameters = list(a~g, b~g),
start = list(a=15, b=1, k=5), data = dat1 )
anova(m0, m1)[2, 'Pr(>Chisq)']
pval = numeric(80)
for(i in 1:80){
y = rnbinom(50, mu = y_det, size = k)
dat1 = data.frame(x,y,g)
m0 = mle2(y~dnbinom(mu = a * b * x/ (b + x), size = k),
start = list(a=15, b=1, k=5), data = dat1 )
m1 = mle2(y~dnbinom(mu = a * b * x/ (b+x), size = k),
parameters = list(a~g, b~g),
start = list(a=15, b=1, k=5), data = dat1 )
pval[i] = anova(m0, m1)[2, 'Pr(>Chisq)']
}
power_hyper = sum(pval<0.05)/length(pval)
power_hyper
set.seed(1001)
L = 30
nparents = 50
offspr_per_parent = 10
noffspr = nparents * offspr_per_parent
dispdist = 2
parent_x = runif(nparents, min=0, max=L)
parent_y = runif(nparents, min=0, max=L)
angle = runif(noffspr, min=0, max=2*pi)
dist = rexp(noffspr, rate = 1/dispdist)
offspr_x = rep(parent_x, each = offspr_per_parent) + cos(angle) * dist
offspr_y = rep(parent_y, each = offspr_per_parent) + sin(angle) * dist
plot(offspr_x, offspr_y)
pos = cbind(offspr_x, offspr_y)
ndist = as.matrix(dist(pos, upper=T, diag=T))
nbrcrowd = rowSums(ndist < 2) - 1
hist(nbrcrowd, breaks = 50, freq = F)
hist(nbrcrowd, breaks = 100, freq = F)
hist(nbrcrowd, breaks = 100, freq = F)
hist(nbrcrowd, breaks = 50, freq = F)
ci = nbrcrowd * 3     # should this not be +1?
m = 2.3
alpha = 0.49
Mass_det = m/(1+ci)
Mass = rgamma(length(Mass_det), scale = Mass_det, shape = alpha)
plot(ci, Mass, log='y')
b = 271.6
k = 0.569
seed_det = b * Mass
seed = rnbinom(length(seed_det), mu = seed_det, size = k)
plot(Mass, seed + 1, log='xy')
curve(b*(m/(1+(x*3))), from=0.0000001, to=5, add=T)  # how to curve deterministic line?
plot(Mass, seed + 1, log='xy')
install.packages('shiny')
library(shiny)
shiny::runGist("2556d79d899f253c46ee830a3b1c5c15")
library(ISLR)
data("Auto")
set.seed(1)
train = sample(392, 196)
attach(Auto)
lm.fit = lm(mpg ~ horsepower, data = Auto, subset = train)
mean((mpg - predict(lm.fit, Auto))[-train]^2)
lm.fit2 = lm(mpg ~ poly(horsepower, 2), data = Auto, subset = train)
mean((mpg - predict(lm.fit2, Auto))[-train]^2)
lm.fit3 = lm(mpg ~ poly(horsepower, 3), data = Auto, subset = train)
mean((mpg - predict(lm.fit3, Auto))[-train]^2)
set.seed(2)
train = sample(392, 196)
lm.fit = lm(mpg ~ horsepower, subset = train)
mean((mpg - predict(lm.fit, Auto))[-train]^2)
lm.fit2 = lm(mpg ~ poly(horsepower, 2), data = Auto, subset = train)
mean((mpg = predict(lm.fit2, Auto))[-train]^2)
lm.fit3 = lm(mpg ~ poly(horsepower, 3), data = Auto, subset = train)
mean((mpg - predict(lm.fit3, Auto))[-train]^2)
lm.fit2 = lm(mpg ~ poly(horsepower, 2), data = Auto, subset = train)
mean((mpg - predict(lm.fit2, Auto))[-train]^2)
predict(lm.fit2, Auto)
mpg
mean((mpg - predict(lm.fit2, Auto))[-train]^2)
lm.fit2
glm.fit = glm(mpg ~ horsepower, data = Auto)
coef(glm.fit)
lm.fit = lm(mpg ~ horsepower, data = Auto)
coef(lm.fit)
library(boot)
glm.fit = glm(mpg ~ horsepower, data = Auto)
cv.err = cv.glm(Auto, glm.fit)
cv.err$delta
cv.error = rep(0,5)
for(i in 1:5){
glm.fit = glm(mpg ~ poly(horsepower, i), data = Auto)
cv.error[i] = cv.glm(Auto, glm.fit)$delta[1]
}
cv.error
set.seed(17)
cv.error.10 = rep(0, 10)
for(i in 1:10){
glm.fit = glm(mpg ~ poly(horsepower, i), data = Auto)
cv.error.10[i] = cv.glm(Auto, glm.fit, K = 10)$delta[1]
}
cv.error.10
cv.glm(Auto, glm.fit, K = 10)$delta[1]
cv.glm(Auto, glm.fit, K = 10)$delta
data("Portfolio")
alpha.fn = function(data, index){
X = data$X[index]
Y = data$Y[index]
return((var(Y) - cov(X,Y)) / (var(X) + var(Y) - 2 * cov(X,Y)))
}
alpha.fn(Portfolio, 1:100)
set.seed(1)
alpha.fn(Portfolio, sample(100, 100, replace = TRUE))
boot(Portfolio, alpha.fn, R = 1000)
return(coef(lm(mpg ~ horsepower, data = data, subset = index)))
boot.fn = function(data, index)
boot.fn = function(data, index){
return(coef(lm(mpg ~ horsepower, data = data, subset = index)))
}
boot.fn(Auto, sample(392, 392, replace = TRUE))
boot.fn = function(data, index){
return(coef(lm(mpg ~ horsepower, data = data, subset = index)))
}
boot.fn(Auto, sample(392, 392, replace = TRUE))
boot.fn(Auto, sample(392, 392, replace = TRUE))
boot.fn(Auto, 1:392))
boot.fn(Auto, 1:392)
set.seed(1)
boot.fn(Auto, sample(392, 392, replace = TRUE))
boot.fn(Auto, sample(392, 392, replace = TRUE))
set.seed(1)
boot.fn(Auto, sample(392, 392, replace = TRUE))
set.seed(1)
boot.fn(Auto, sample(392, 392, replace = TRUE))
set.seed(1)
boot.fn(Auto, sample(392, 392, replace = TRUE))
boot.fn(Auto, sample(392, 392, replace = TRUE))
boot(Auto, boot.fn, 1000)
coef(lm.fit)
boot.fn(Auto, 1:392)
summary(lm(mpg ~ horsepower, data = Auto))$coef
boot.fn = function(data, index){
coefficients(lm(mpg ~ horsepower + I(horsepower^2), data = data, subset = index))
}
set.seed(1)
boot(Auto, boot.fn, 1000)
summary(lm(mpg ~ horsepower + I(horsepower^2), data = Auto))$coef
set.seed(1)
x = rnorm(100)
y = x - 2*x^2 + rnorm(100)
plot(y ~ x)
set.seed(100)
cv.error = rep(0, 4)
data_xy = cbind(x,y)
View(data_xy)
colnames(data_xy) = c('x', 'y')
View(data_xy)
colnames(data_xy) = c('x', 'y')
View(data_xy)
data_xy = cbind(x,y)
colnames(data_xy) = c('x', 'y')
View(data_xy)
cv.error = rep(0, 4)
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
cv.error[i] = cv.glm(data_xy, glm.fit)$delta[1]
}
class(data_xy)
data_xy = as.data.frame(cbind(x,y))
cv.error = rep(0, 4)
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
cv.error[i] = cv.glm(data_xy, glm.fit)$delta[1]
}
cv.error
data_xy = data.frame(x,y)
View(data_xy)
cv.error = rep(0, 4)
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
cv.error[i] = cv.glm(data_xy, glm.fit)$delta[1]
}
cv.error
set.seed(30)
data_xy = data.frame(x,y)
cv.error = rep(0, 4)
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
cv.error[i] = cv.glm(data_xy, glm.fit)$delta[1]
}
cv.error
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
print(summary(glm.fit)$Coefficients)
}
glm.fit
summary(glm.fit)$Coefficients
summary(glm.fit)$coefficients
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
print(summary(glm.fit)$coefficients)
}
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
print(summary(glm.fit)$coefficients)
}
library(MASS)
mean(Boston$medv)
mu = mean(Boston$medv)
se.mu = sd(Boston$medv) / sqrt(length(Boston$medv))
se.mu
sqrt(var(Boston$medv))
set.seed(1)
boot.fn = function(data, index){
return(mean(data))
}
boot(Boston$medv, boot.fn, R = 1000)
boot.fn = function(data, index){
return(mean(data[index]))
}
set.seed(1)
boot(Boston$medv, boot.fn, R = 1000)
se.mu
what = boot(Boston$medv, boot.fn, R = 1000)
what$statistic()
CI.boot = c(22.53281 - 2*0.4119374, 22.53281 + 2*0.4119374)
CI.boot
t.test(Boston$medv)
median(Boston$medv)
mu.med = median(Boston$medv)
boot.fn.med = function(data, index){
return(median(data[index]))
}
boot(Boston$medv, boot.fn.med, R = 1000)
set.seed(1)
boot(Boston$medv, boot.fn.med, R = 1000)
?quantile
quantile(Boston$medv)
quantile(Boston$medv, 10)
quantile(Boston$medv, 0.1)
boot.fn.10th = function(data, index){
return(quantile(data[index], 0.1))
}
set.seed(1)
boot(Boston$medv, boot.fn.10th, R = 1000)
summary(glm.fit)$coefficients
summary(glm.fit)
CI.boot
install.packages('mixtools')
library(mixtools)
hist(faithful$waiting)
mog.fit = normalmixEM(faithful$waiting, verb = TRUE)
dim(faithful)
hist(faithful$eruptions)
install.packages("mixtools")
install.packages("mixtools")
library(mixtools)
hist(faithful$waiting)
mog.fit = normalmixEM(faithful$waiting, verb = TRUE)
plot(mog.fit, which = 1)
plot(mog.fit, which = 2)
lines(density(faithful$waiting), lty = 2, lwd = 2)
mog.fitk3 = normalmixEM(faithful$waiting, verb = TRUE, k = 3)
mog.fitk4 = normalmixEM(faithful$waiting, verb = TRUE, k = 4)
plot(mog.fitk3, which = 1)
plot(mog.fitk3, which = 2)
lines(density(faithful$waiting), lty = 2, lwd = 2)
plot(mog.fitk4, which = 1)
plot(mog.fitk4, which = 2)
lines(density(faithful$waiting), lty = 2, lwd = 2)
hist(faithful$eruptions)
mog.fit = normalmixEM(faithful$eruptions, verb = TRUE)
plot(mog.fit, which = 1)
plot(mog.fit, which = 2)
lines(density(faithful$eruptions), lty = 2, lwd = 2)
mog.fitk3 = normalmixEM(faithful$eruptions, verb = TRUE, k = 3)
mog.fitk4 = normalmixEM(faithful$eruptions, verb = TRUE, k = 4)
setwd("~/Documents/Universiteit/Master/Remote Sensing & GIS Integration/litterkriging")
library(sp)
library(gstat)
library(raster)
library(gsheet)
library(stars)
source('scripts/getdataframe.R')
source('scripts/getpoints.R')
sampledata <- getDataFrame('https://docs.google.com/spreadsheets/d/1Dn96ArmKeIu-lnDSUHzAKnGcJv7Kjmqii_H-Y-zVd74/edit?usp=sharing')
sampledata$lon <- as.numeric(sub(".*,", "", sampledata$Coordinates))
sampledata$lat <- as.numeric(sub(",.*", "", sampledata$Coordinates))
coordinates(sampledata) <- ~lon+lat
proj4string(sampledata) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
roads <- getPoints("data/osm_roads_aoi_wgs84.shp")
plot(sampledata)
plot(roads, add=T)
sampledata <- st_as_sf(sampledata)
sampledata <- st_transform(sampledata, crs =28992)
hist(sampledata$total, breaks = c(0,0.5,1,2,3,4,5,6,7,8,9,10,20,30,40,50))
summary(sampledata)
sampledata_low <- sampledata[-119,]
glitter <- gstat(formula = total ~ 1, data = sampledata_low)
vglitter <- variogram(glitter, boundaries = c(25, 60, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1100))
plot(vglitter, plot.numbers = T)
class(glitter)
hist(log(sampledata$total))
hist(sqrt(sampledata$total))
sampledata$total
sampledata$total + 1
log(sampledata$total + 1)
hist(log(sampledata$total + 1))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(20, 40, 60, 120, 200, 300, 400, 500, 600, 700, 800, 900, 1100))
plot(vglitter, plot.numbers = T)
vgmlitter <- vgm(nugget = 1.5, psill = 7.5, range = 400, model = 'Exp')
vgmlitter <- fit.variogram(vglitter, vgmlitter)
plot(vglitter, vgmlitter)
attr(vgmlitter, 'SSErr')
glitter <- gstat(formula = total ~ 1, data = sampledata)
vglitter <- variogram(glitter, boundaries = c(20, 40, 60, 120, 200, 300, 400, 500, 600, 700, 800, 900, 1100))
plot(vglitter, plot.numbers = T)
length(sampledata)
nrow(sampledata)
sampledata_low <- sampledata[sampledata$total < 40,]
nrow(sampledata_low)
glitter <- gstat(formula = total ~ 1, data = sampledata_low)
vglitter <- variogram(glitter, boundaries = c(20, 40, 60, 120, 200, 300, 400, 500, 600, 700, 800, 900, 1100))
plot(vglitter, plot.numbers = T)
View(sampledata)
sampledata_low <- sampledata[sampledata$total < 20,]
glitter <- gstat(formula = total ~ 1, data = sampledata_low)
vglitter <- variogram(glitter, boundaries = c(20, 40, 60, 120, 200, 300, 400, 500, 600, 700, 800, 900, 1100))
plot(vglitter, plot.numbers = T)
sampledata_low <- sampledata[sampledata$total < 40,]
glitter <- gstat(formula = total ~ 1, data = sampledata_low)
vglitter <- variogram(glitter, boundaries = c(20, 40, 60, 120, 200, 300, 400, 500, 600, 700, 800, 900, 1100))
plot(vglitter, plot.numbers = T)
sampledata_krig <- sampledata[sampledata$Point.ID < 200,]
length(sampledata_krig)
nrow(sampledata_krig)
sampledata_low <- sampledata_krig[sampledata_krig$total < 40,]
nrow(sampledata_low)
glitter <- gstat(formula = total ~ 1, data = sampledata_low)
vglitter <- variogram(glitter, boundaries = c(20, 40, 60, 120, 200, 300, 400, 500, 600, 700, 800, 900, 1100))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(60, 120, 200, 300, 400, 500, 600, 700, 800, 900, 1100))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(75, 120, 200, 300, 400, 500, 600, 700, 800, 900, 1100))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(75, 120, 200, 300, 400, 500, 600))
plot(vglitter, plot.numbers = T)
hist(sampledata_low$total, breaks = c(0,0.5,1,2,3,4,5,6,7,8,9,10,20,30,40,50))
glitter <- gstat(formula = total ~ 1, data = sampledata_low)
vglitter <- variogram(glitter, boundaries = c(75, 120, 200, 300, 400, 500, 600))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(75, 120, 200, 300, 400, 500, 600, 800, 1000))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(75, 120, 200, 300, 400, 500, 600))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(75, 120, 200, 300, 400, 500, 600, 800))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(75, 120, 200, 300, 400, 500, 600, 800, 1000))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(75, 120, 200, 300, 400, 500, 600, 800, 1000, 1500))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(75, 120, 200, 300, 400, 500, 600, 800))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(70, 130, 200, 300, 400, 500, 600, 800))
plot(vglitter, plot.numbers = T)
proj4string(sampledata_low)
st_crs(sampledata_low)
vglitter <- variogram(glitter, boundaries = c(70, 125, 175, 300, 400, 500, 600, 800))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(70, 125, 175, 250, 300, 350, 400, 500, 600, 800))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(70, 125, 175, 250, 300, 400, 500, 600, 800))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(70, 125, 175, 300, 400, 500, 600, 800))
plot(vglitter, plot.numbers = T)
vgmlitter <- vgm(nugget = 1.5, psill = 12, range = 350, model = 'Exp')
vgmlitter <- fit.variogram(vglitter, vgmlitter)
plot(vglitter, vgmlitter)
attr(vgmlitter, 'SSErr')
litter_cv <- krige.cv(formula = total ~ 1, locations = sampledata_low, vgmlitter, nmax = 15)
plot(litter_cv$residual)
bubble(litter_cv, zcol = 'residual')
mean(litter_cv$zscore)
sd(litter_cv$zscore)
class(litter_cv)
litter_cv_sp <- as(litter_cv, 'Spatial')
bubble(litter_cv_sp, zcol = 'residual')
bubble(litter_cv_sp, zcol = 'residual', na.rm = T)
litter_cv_sp$residual
bubble(litter_cv_sp, zcol = 'residual', na.rm = T)
litter_cv_sp_na <- na.rm(litter_cv_sp)
litter_cv_sp_na <- na.omit(litter_cv_sp)
bubble(litter_cv_sp_na, zcol = 'residual')
litter_cv_sp_na
roadnetwork <- raster('data/a04_osm_roads_buffer_raster_wgs84.tif')
roadnetwork[roadnetwork == -9999] <- NA
roadnetwork <- as(roadnetwork, 'SpatialGridDataFrame')
roadnetwork <- projectRaster(roadnetwork, crs = 28992)
class(roadnetwork)
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = roadnetwork, model = vgmlitter, nmax = 15)
class(sampledata_low)
roadnetwork <- spTransform(roadnetwork, crs = 28992)
roadnetwork <- spTransform(roadnetwork, CRS = 28992)
roadnetwork <- spTransform(roadnetwork, 28992)
CRS('EPSG:28992')
CRS(28992)
?spTransform
roadnetwork <- spTransform(roadnetwork, "+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725 +units=m +no_defs
")
crs(roadnetwork)
crs(sampledata_low)
crs(roadnetwork) == crs(sampledata_low)
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = roadnetwork, model = vgmlitter, nmax = 15)
class(sampledata_low)
sampledata_low <- as(sampledata_low, 'Spatial')
class(sampledata_low)
class(roadnetwork)
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = roadnetwork, model = vgmlitter, nmax = 15)
CRS(sampledata_low)
CRS(proj4string(sampledata_low))
roadnetwork <- spTransform(roadnetwork, CRS(proj4string(sampledata_low)))
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = roadnetwork, model = vgmlitter, nmax = 15)
spplot(litter_krig['var1.pred'])
plot(roadnetwork)
roadnetwork_ori <- raster('data/a04_osm_roads_buffer_raster_wgs84.tif')
roadnetwork_ori[roadnetwork_ori == -9999] <- NA
roadnetwork_ori <- as(roadnetwork_ori, 'SpatialGridDataFrame')
plot(roadnetwork_ori)
plot(vglitter, vgmlitter)
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(70, 125, 175, 300, 400, 500, 600, 800, 100))
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(70, 125, 175, 300, 400, 500, 600, 800, 1000))
plot(vglitter, plot.numbers = T)
vgmlitter <- vgm(nugget = 1.5, psill = 12, range = 350, model = 'Exp')
vgmlitter <- fit.variogram(vglitter, vgmlitter)
plot(vglitter, vgmlitter)
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(70, 125, 175, 300, 400, 500, 600, 800, 1000, 1500))
plot(vglitter, plot.numbers = T)
hist(sampledata_low$total, breaks = c(0,0.5,1,2,3,4,5,6,7,8,9,10,20,30,40,50))
hist(sampledata_low$total, breaks = c(0,0.5,1,2,3,4,5,6,7,8,9,10,20,30,40,50))
plot(litter_cv$residual)
plot(litter_cv$residual)
mean(litter_cv$zscore)
sd(litter_cv$zscore)
mean(litter_cv$zscore, na.rm = T)
litter_cv$residual
mean(litter_cv$zscore, na.rm = T)
sd(litter_cv$zscore, na.rm = T)
litter_cv$zscore
sd(litter_cv$zscore, na.rm = T)
plot(vglitter, vgmlitter)
glitter <- gstat(formula = total ~ 1, data = sampledata_low)
vglitter <- variogram(glitter, boundaries = c(70, 125, 175, 300, 400, 500, 600, 800, 1000, 1500))
plot(vglitter, plot.numbers = T)
vgmlitter <- vgm(nugget = 1.5, psill = 12, range = 350, model = 'Exp')
vgmlitter <- fit.variogram(vglitter, vgmlitter)
plot(vglitter, vgmlitter)
litter_cv <- krige.cv(formula = total ~ 1, locations = sampledata_low, vgmlitter, nmax = 15)
plot(litter_cv$residual)
glitter
class(glitter)
mean(litter_cv$zscore, na.rm = T)
sd(litter_cv$zscore, na.rm = T)
litter_cv$zscore
class(sampledata_low$total)
plot(vglitter, vgmlitter)
proj4string(sampledata_low)
plot(roadnetwork_ori)
class(roadnetwork_ori)
class(roadnetwork)
?spTransform
roadnetwork_ori <- raster('data/c02_osm_road_raster.tif')
roadnetwork_ori[roadnetwork_ori == -9999] <- NA
roadnetwork_ori <- as(roadnetwork_ori, 'SpatialGridDataFrame')
class(roadnetwork_ori)
crs(roadnetwork_ori)
class(sampledata_low)
class(roadnetwork_ori)
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = roadnetwork, model = vgmlitter, nmax = 15)
spplot(litter_krig['var1.pred'])
?krige
bbox(roadnetwork_ori)
groenlo <- as(bbox(roadnetwork_ori), 'Spatial')
class(bbox(roadnetwork_ori))
groenlo <- raster(bbox(roadnetwork_ori))
plot(groenlo)
par(mfrow=c(1,1))
plot(groenlo)
class(groenlo)
groenlo
hist(sampledata_low$total, breaks = c(0,0.5,1,2,3,4,5,6,7,8,9,10,20,30,40,50))
hist(sampledata_low$total, breaks = c(0,0.5,1,2,3,4,5,6,7,8,9,10,20,30,40,50))
