lm.fit2 = lm(mpg ~ poly(horsepower, 2), data = Auto, subset = train)
mean((mpg - predict(lm.fit2, Auto))[-train]^2)
lm.fit3 = lm(mpg ~ poly(horsepower, 3), data = Auto, subset = train)
mean((mpg - predict(lm.fit3, Auto))[-train]^2)
set.seed(2)
train = sample(392, 196)
lm.fit = lm(mpg ~ horsepower, subset = train)
mean((mpg - predict(lm.fit, Auto))[-train]^2)
lm.fit2 = lm(mpg ~ poly(horsepower, 2), data = Auto, subset = train)
mean((mpg = predict(lm.fit2, Auto))[-train]^2)
lm.fit3 = lm(mpg ~ poly(horsepower, 3), data = Auto, subset = train)
mean((mpg - predict(lm.fit3, Auto))[-train]^2)
lm.fit2 = lm(mpg ~ poly(horsepower, 2), data = Auto, subset = train)
mean((mpg - predict(lm.fit2, Auto))[-train]^2)
predict(lm.fit2, Auto)
mpg
mean((mpg - predict(lm.fit2, Auto))[-train]^2)
lm.fit2
glm.fit = glm(mpg ~ horsepower, data = Auto)
coef(glm.fit)
lm.fit = lm(mpg ~ horsepower, data = Auto)
coef(lm.fit)
library(boot)
glm.fit = glm(mpg ~ horsepower, data = Auto)
cv.err = cv.glm(Auto, glm.fit)
cv.err$delta
cv.error = rep(0,5)
for(i in 1:5){
glm.fit = glm(mpg ~ poly(horsepower, i), data = Auto)
cv.error[i] = cv.glm(Auto, glm.fit)$delta[1]
}
cv.error
set.seed(17)
cv.error.10 = rep(0, 10)
for(i in 1:10){
glm.fit = glm(mpg ~ poly(horsepower, i), data = Auto)
cv.error.10[i] = cv.glm(Auto, glm.fit, K = 10)$delta[1]
}
cv.error.10
cv.glm(Auto, glm.fit, K = 10)$delta[1]
cv.glm(Auto, glm.fit, K = 10)$delta
data("Portfolio")
alpha.fn = function(data, index){
X = data$X[index]
Y = data$Y[index]
return((var(Y) - cov(X,Y)) / (var(X) + var(Y) - 2 * cov(X,Y)))
}
alpha.fn(Portfolio, 1:100)
set.seed(1)
alpha.fn(Portfolio, sample(100, 100, replace = TRUE))
boot(Portfolio, alpha.fn, R = 1000)
return(coef(lm(mpg ~ horsepower, data = data, subset = index)))
boot.fn = function(data, index)
boot.fn = function(data, index){
return(coef(lm(mpg ~ horsepower, data = data, subset = index)))
}
boot.fn(Auto, sample(392, 392, replace = TRUE))
boot.fn = function(data, index){
return(coef(lm(mpg ~ horsepower, data = data, subset = index)))
}
boot.fn(Auto, sample(392, 392, replace = TRUE))
boot.fn(Auto, sample(392, 392, replace = TRUE))
boot.fn(Auto, 1:392))
boot.fn(Auto, 1:392)
set.seed(1)
boot.fn(Auto, sample(392, 392, replace = TRUE))
boot.fn(Auto, sample(392, 392, replace = TRUE))
set.seed(1)
boot.fn(Auto, sample(392, 392, replace = TRUE))
set.seed(1)
boot.fn(Auto, sample(392, 392, replace = TRUE))
set.seed(1)
boot.fn(Auto, sample(392, 392, replace = TRUE))
boot.fn(Auto, sample(392, 392, replace = TRUE))
boot(Auto, boot.fn, 1000)
coef(lm.fit)
boot.fn(Auto, 1:392)
summary(lm(mpg ~ horsepower, data = Auto))$coef
boot.fn = function(data, index){
coefficients(lm(mpg ~ horsepower + I(horsepower^2), data = data, subset = index))
}
set.seed(1)
boot(Auto, boot.fn, 1000)
summary(lm(mpg ~ horsepower + I(horsepower^2), data = Auto))$coef
set.seed(1)
x = rnorm(100)
y = x - 2*x^2 + rnorm(100)
plot(y ~ x)
set.seed(100)
cv.error = rep(0, 4)
data_xy = cbind(x,y)
View(data_xy)
colnames(data_xy) = c('x', 'y')
View(data_xy)
colnames(data_xy) = c('x', 'y')
View(data_xy)
data_xy = cbind(x,y)
colnames(data_xy) = c('x', 'y')
View(data_xy)
cv.error = rep(0, 4)
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
cv.error[i] = cv.glm(data_xy, glm.fit)$delta[1]
}
class(data_xy)
data_xy = as.data.frame(cbind(x,y))
cv.error = rep(0, 4)
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
cv.error[i] = cv.glm(data_xy, glm.fit)$delta[1]
}
cv.error
data_xy = data.frame(x,y)
View(data_xy)
cv.error = rep(0, 4)
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
cv.error[i] = cv.glm(data_xy, glm.fit)$delta[1]
}
cv.error
set.seed(30)
data_xy = data.frame(x,y)
cv.error = rep(0, 4)
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
cv.error[i] = cv.glm(data_xy, glm.fit)$delta[1]
}
cv.error
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
print(summary(glm.fit)$Coefficients)
}
glm.fit
summary(glm.fit)$Coefficients
summary(glm.fit)$coefficients
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
print(summary(glm.fit)$coefficients)
}
for(i in 1:4){
glm.fit = glm(y ~ poly(x, i), data = data_xy)
print(summary(glm.fit)$coefficients)
}
library(MASS)
mean(Boston$medv)
mu = mean(Boston$medv)
se.mu = sd(Boston$medv) / sqrt(length(Boston$medv))
se.mu
sqrt(var(Boston$medv))
set.seed(1)
boot.fn = function(data, index){
return(mean(data))
}
boot(Boston$medv, boot.fn, R = 1000)
boot.fn = function(data, index){
return(mean(data[index]))
}
set.seed(1)
boot(Boston$medv, boot.fn, R = 1000)
se.mu
what = boot(Boston$medv, boot.fn, R = 1000)
what$statistic()
CI.boot = c(22.53281 - 2*0.4119374, 22.53281 + 2*0.4119374)
CI.boot
t.test(Boston$medv)
median(Boston$medv)
mu.med = median(Boston$medv)
boot.fn.med = function(data, index){
return(median(data[index]))
}
boot(Boston$medv, boot.fn.med, R = 1000)
set.seed(1)
boot(Boston$medv, boot.fn.med, R = 1000)
?quantile
quantile(Boston$medv)
quantile(Boston$medv, 10)
quantile(Boston$medv, 0.1)
boot.fn.10th = function(data, index){
return(quantile(data[index], 0.1))
}
set.seed(1)
boot(Boston$medv, boot.fn.10th, R = 1000)
summary(glm.fit)$coefficients
summary(glm.fit)
CI.boot
install.packages('mixtools')
library(mixtools)
hist(faithful$waiting)
mog.fit = normalmixEM(faithful$waiting, verb = TRUE)
dim(faithful)
hist(faithful$eruptions)
install.packages("mixtools")
install.packages("mixtools")
library(mixtools)
hist(faithful$waiting)
mog.fit = normalmixEM(faithful$waiting, verb = TRUE)
plot(mog.fit, which = 1)
plot(mog.fit, which = 2)
lines(density(faithful$waiting), lty = 2, lwd = 2)
mog.fitk3 = normalmixEM(faithful$waiting, verb = TRUE, k = 3)
mog.fitk4 = normalmixEM(faithful$waiting, verb = TRUE, k = 4)
plot(mog.fitk3, which = 1)
plot(mog.fitk3, which = 2)
lines(density(faithful$waiting), lty = 2, lwd = 2)
plot(mog.fitk4, which = 1)
plot(mog.fitk4, which = 2)
lines(density(faithful$waiting), lty = 2, lwd = 2)
hist(faithful$eruptions)
mog.fit = normalmixEM(faithful$eruptions, verb = TRUE)
plot(mog.fit, which = 1)
plot(mog.fit, which = 2)
lines(density(faithful$eruptions), lty = 2, lwd = 2)
mog.fitk3 = normalmixEM(faithful$eruptions, verb = TRUE, k = 3)
mog.fitk4 = normalmixEM(faithful$eruptions, verb = TRUE, k = 4)
library(sp)
library(gstat)
library(raster)
library(gsheet)
library(stars)
source('scripts/getdataframe.R')
source('scripts/getpoints.R')
sampledata <- getDataFrame('https://docs.google.com/spreadsheets/d/1Dn96ArmKeIu-lnDSUHzAKnGcJv7Kjmqii_H-Y-zVd74/edit?usp=sharing')
library(gsheet)
sampledata <- getDataFrame('https://docs.google.com/spreadsheets/d/1Dn96ArmKeIu-lnDSUHzAKnGcJv7Kjmqii_H-Y-zVd74/edit?usp=sharing')
library(sp)
library(gstat)
library(raster)
library(gsheet)
library(stars)
source('scripts/getdataframe.R')
setwd("~/Documents/Universiteit/Master/Remote Sensing & GIS Integration/litterkriging")
source('scripts/getdataframe.R')
source('scripts/getpoints.R')
sampledata <- getDataFrame('https://docs.google.com/spreadsheets/d/1Dn96ArmKeIu-lnDSUHzAKnGcJv7Kjmqii_H-Y-zVd74/edit?usp=sharing')
sampledata$lon <- as.numeric(sub(".*,", "", sampledata$Coordinates))
sampledata$lat <- as.numeric(sub(",.*", "", sampledata$Coordinates))
coordinates(sampledata) <- ~lon+lat
proj4string(sampledata) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
roads <- getPoints("data/osm_roads_aoi_wgs84.shp")
plot(sampledata)
plot(roads, add=T)
sampledata <- st_as_sf(sampledata)
sampledata <- st_transform(sampledata, crs =28992)
sampledata_krig <- sampledata[sampledata$Point.ID < 200,]
sampledata_low <- sampledata_krig[sampledata_krig$total < 40,]
hist(sampledata_low$total, breaks = c(0,0.5,1,2,3,4,5,6,7,8,9,10,20,30,40,50))
dim(sampledata_low)
glitter <- gstat(formula = total ~ 1, data = sampledata_low)
vglitter <- variogram(glitter, boundaries = c(70, 125, 175, 300, 400, 500, 600, 800, 1000, 1500))
plot(vglitter, plot.numbers = T)
vgmlitter <- vgm(nugget = 2, psill = 12, range = 350, model = 'Exp')
vgmlitter <- fit.variogram(vglitter, vgmlitter)
plot(vglitter, vgmlitter)
attr(vgmlitter, 'SSErr')
litter_cv <- krige.cv(formula = total ~ 1, locations = sampledata_low, vgmlitter, nmax = 15)
plot(litter_cv$residual)
mean(litter_cv$zscore, na.rm = T)
sd(litter_cv$zscore, na.rm = T)
roadnetwork <- raster('data/c02_osm_road_raster.tif')
roadnetwork[roadnetwork == -9999] <- NA
roadnetwork <- as(roadnetwork, 'SpatialGridDataFrame')
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = roadnetwork, model = vgmlitter, nmax = 15)
sampledata_low <- as(sampledata_low, 'Spatial')
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = roadnetwork, model = vgmlitter, nmax = 15)
class(litter_krig)
study_area <- readOGR(dsn = "data", layer = "mapping_area_groenlo")
library(rgeos)
study_area <- readOGR(dsn = "data", layer = "mapping_area_groenlo")
getwd()
library(rgdal)
study_area <- readOGR(dsn = "data", layer = "mapping_area_groenlo")
class(study_area)
crs(study_area)
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = study_area, model = vgmlitter, nmax = 15)
crs(study_area)
crs(sampledata_low)
crs(study_area) <- crs(sampledata_low)
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = study_area, model = vgmlitter, nmax = 15)
spplot(litter_krig['var1.pred'])
?raster
extent(study_area)
area_raster <- raster(extent(study_area))
area_raster
area_raster <- raster(extent(study_area), resolution = c(1,1))
area_raster
crs(area_raster) <- crs(sampledata_low)
area_raster
plot(area_raster)
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = area_raster, model = vgmlitter, nmax = 15)
class(sampledata_l)
class(area_ra)
class(area_raster)
area_raster <- as(area_raster, 'SpatialGridDataFrame')
class(area_raster)
area_raster <- as(area_raster, 'SpatialGrid')
class(area_raster)
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = area_raster, model = vgmlitter, nmax = 15)
area_raster <- raster(extent(study_area), resolution = c(10,10))
crs(area_raster) <- crs(sampledata_low)
area_raster <- as(area_raster, 'SpatialGrid')
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = area_raster, model = vgmlitter, nmax = 15)
spplot(litter_krig['var1.pred'])
dim(litter_krig)
spplot(litter_krig['var1.var'], sp.layout = list('sp.points', dummydata, col = 'black'))
spplot(litter_krig['var1.var'], sp.layout = list('sp.points', sampledata_low, col = 'black'))
class(litter_krig)
final <- crop(litter_krig, roadnetwork)
final <- crop(litter_krig$var1.pred, roadnetwork)
final <- crop(litter_krig, roadnetwork)
?crop
hist(sampledata_low$total, breaks = c(0,0.5,1,2,3,4,5,6,7,8,9,10,20,30,40,50))
glitter <- gstat(formula = total ~ 1, data = sampledata_low)
vglitter <- variogram(glitter, boundaries = c(70, 125, 175, 300, 400, 500, 600, 800, 1000, 1500))
plot(vglitter, plot.numbers = T)
plot(sampledata)
plot(sampledata$Coordinates)
plot(sampledata_low)
plot(roads, add=T)
spplot(sampledata_low)
spplot(sampledata_low, zcol = 'total')
litter_cv$residual
litter_cv <- krige.cv(formula = total ~ 1, locations = sampledata_low, vgmlitter)
litter_cv$residual
vgmlitter
vgmlitter[1,1]
vgmlitter[1,2]
vgmlitter[1,2]=3
vgmlitter
litter_cv <- krige.cv(formula = total ~ 1, locations = sampledata_low, vgmlitter)
litter_cv$residual
sampledata_low$total
class(sampledata_low$total)
litter_cv <- krige.cv(formula = total ~ 1, locations = sampledata_low)
litter_cv$residual
litter_cv <- krige.cv(formula = total ~ 1, locations = sampledata_low, vgmlitter,
nmax=3)
litter_cv$residual
vglitter <- variogram(glitter, boundaries = c(1E-1,70, 125, 175, 300, 400, 500, 600, 800, 1000, 1500))
vglitter
vglitter <- variogram(glitter, boundaries = c(1E-3,70, 125, 175, 300, 400, 500, 600, 800, 1000, 1500))
vglitter
?duplicated
duplicated(sampledata_low$Coordinates)
which(duplicated(sampledata_low$Coordinates))
library(sp)
library(gstat)
library(raster)
library(gsheet)
library(stars)
library(rgdal)
source('scripts/getdataframe.R')
source('scripts/getpoints.R')
sampledata <- getDataFrame('https://docs.google.com/spreadsheets/d/1MyHRcpDJX2iro6a_2nk0mOJBRSm_x0lpkLH04IoKJII/edit?usp=sharing')
sampledata$lon <- as.numeric(sub(".*,", "", sampledata$Coordinates))
sampledata$lat <- as.numeric(sub(",.*", "", sampledata$Coordinates))
coordinates(sampledata) <- ~lon+lat
proj4string(sampledata) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
sampledata <- st_as_sf(sampledata)
sampledata <- st_transform(sampledata, crs =28992)
sampledata_krig <- sampledata[sampledata$Point.ID < 200,]
sampledata_low <- sampledata_krig[sampledata_krig$total < 40,]
dim(sampledata_low)
dim(sampledata)
dim(sampledata_krig)
names(sampledata)
sampledata_krig <- sampledata[sampledata$point_id < 200,]
dim(sampledata_krig)
sampledata <- getDataFrame('https://docs.google.com/spreadsheets/d/1MyHRcpDJX2iro6a_2nk0mOJBRSm_x0lpkLH04IoKJII/edit?usp=sharing')
sampledata$lon <- as.numeric(sub(".*,", "", sampledata$Coordinates))
sampledata$lat <- as.numeric(sub(",.*", "", sampledata$Coordinates))
coordinates(sampledata) <- ~lon+lat
proj4string(sampledata) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
sampledata <- st_as_sf(sampledata)
sampledata <- st_transform(sampledata, crs =28992)
names(sampledata)
sampledata <- getDataFrame('https://docs.google.com/spreadsheets/d/1MyHRcpDJX2iro6a_2nk0mOJBRSm_x0lpkLH04IoKJII/edit?usp=sharing')
sampledata$lon <- as.numeric(sub(".*,", "", sampledata$Coordinates))
sampledata$lat <- as.numeric(sub(",.*", "", sampledata$Coordinates))
coordinates(sampledata) <- ~lon+lat
proj4string(sampledata) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
sampledata <- st_as_sf(sampledata)
sampledata <- st_transform(sampledata, crs =28992)
names(sampledata)
sampledata_krig <- sampledata[sampledata$point_id < 200,]
sampledata_low <- sampledata_krig[sampledata_krig$total < 40,]
dim(sampledata_low)
hist(sampledata_low$total, breaks = c(0,0.5,1,2,3,4,5,6,7,8,9,10,20,30,40,50))
hist(sampledata_low$total, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,30,40,50))
glitter <- gstat(formula = total ~ 1, data = sampledata_low)
vglitter <- variogram(glitter, boundaries = c(1E-3,70, 125, 175, 300, 400, 500, 600, 800, 1000, 1500))
vglitter
plot(vglitter, plot.numbers = T)
vglitter <- variogram(glitter, boundaries = c(70, 125, 175, 300, 400, 500, 600, 800, 1000, 1500))
vglitter
plot(vglitter, plot.numbers = T)
vgmlitter <- vgm(nugget = 2, psill = 12, range = 350, model = 'Exp')
vgmlitter <- fit.variogram(vglitter, vgmlitter)
plot(vglitter, vgmlitter)
litter_cv <- krige.cv(formula = total ~ 1, locations = sampledata_low, vgmlitter,
nmax=3)
litter_cv$residual
litter_cv$residua
litter_cv <- krige.cv(formula = total ~ 1, locations = sampledata_low, vgmlitter)
litter_cv$residual
plot(litter_cv$residual)
mean(litter_cv$zscore, na.rm = T)
mean(litter_cv$zscore)
sd(litter_cv$zscore, na.rm = T)
sd(litter_cv$zscore)
study_area <- readOGR(dsn = "data", layer = "mapping_area_groenlo")
crs(study_area) <- crs(sampledata_low)
area_raster <- raster(extent(study_area), resolution = c(10,10))
crs(area_raster) <- crs(sampledata_low)
area_raster <- as(area_raster, 'SpatialGrid')
sampledata_low <- as(sampledata_low, 'Spatial')
area_raster <- raster(extent(study_area), resolution = c(5,5))
crs(area_raster) <- crs(sampledata_low)
area_raster <- as(area_raster, 'SpatialGrid')
litter_krig = krige(total ~ 1, locations = sampledata_low, newdata = area_raster, model = vgmlitter, nmax = 15)
spplot(litter_krig['var1.pred'])
spplot(litter_krig['var1.var'], sp.layout = list('sp.points', sampledata_low, col = 'black'))
spplot(litter_krig['var1.pred'])
final <- crop(litter_krig, roadnetwork)
roadnetwork <- raster('data/c02_osm_road_raster.tif')
roadnetwork[roadnetwork == -9999] <- NA
roadnetwork <- as(roadnetwork, 'SpatialGridDataFrame')
final <- crop(litter_krig, roadnetwork)
roadnetwork <- readOGR('data/c03_osm_roads_buffer_Dissolve')
roadnetwork <- readOGR(dsn = 'data', layer = 'c03_osm_roads_buffer_Dissolve')
plot(roadnetwork)
head(roadnetwork)
final <- crop(litter_krig, roadnetwork)
?crop
extent(roadnetwork)
class(litter_krig)
final <- crop(litter_krig, extent(roadnetwork))
mask
?mask
final <- mask(litter_krig, roadnetwork)
?raster
final_rast <- raster(litter_krig)
litter_krig_rast <- raster(litter_krig)
final <- mask(litter_krig_rast, roadnetwork)
spplot(final, zcol = 'var.pred')
names(final)
spplot(final, zcol = 'var1.pred')
class(raster)
class(final)
writeRaster(final, 'output/litter_ordinarykriging')
?writeRaster
writeRaster(final, 'output/litter_ordinarykriging', format = 'GeoTiff')
writeRaster(final, 'output/litter_ordinarykriging', format = 'GTiff')
sampledata <- getDataFrame('https://docs.google.com/spreadsheets/d/1MyHRcpDJX2iro6a_2nk0mOJBRSm_x0lpkLH04IoKJII/edit?usp=sharing')
sampledata$lon <- as.numeric(sub(".*,", "", sampledata$Coordinates))
sampledata$lat <- as.numeric(sub(",.*", "", sampledata$Coordinates))
# Turn data frame into sp object
coordinates(sampledata) <- ~lon+lat
proj4string(sampledata) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
# Turn data into spatial object (sf) and transform to RDnew
sampledata <- st_as_sf(sampledata)
sampledata <- st_transform(sampledata, crs =28992)
# Work only with kriging points (not validation or bias data)
sampledata_krig <- sampledata[sampledata$point_id < 200,]
sampledata_low <- sampledata_krig[sampledata_krig$total < 40,]
sampledata <- read.csv(text=gsheet2text('https://docs.google.com/spreadsheets/d/1MyHRcpDJX2iro6a_2nk0mOJBRSm_x0lpkLH04IoKJII/edit?usp=sharing',
format='csv'), stringsAsFactors=FALSE,fileEncoding = "UTF-8",encoding = "UTF-8")
sampledata$lon <- as.numeric(sub(".*,", "", sampledata$Coordinates))
sampledata$lat <- as.numeric(sub(",.*", "", sampledata$Coordinates))
coordinates(sampledata) <- ~lon+lat
proj4string(sampledata) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
sampledata <- st_as_sf(sampledata)
sampledata <- st_transform(sampledata, crs =28992)
sampledata_krig <- sampledata[sampledata$point_id < 200,]
sampledata_low <- sampledata_krig[sampledata_krig$total < 40,]
sampledata <- sampledata[sampledata$point_id < 200,]
sampledata <- sampledata[sampledata$total < 40,]
sampledata <- read.csv(text=gsheet2text('https://docs.google.com/spreadsheets/d/1MyHRcpDJX2iro6a_2nk0mOJBRSm_x0lpkLH04IoKJII/edit?usp=sharing',
format='csv'), stringsAsFactors=FALSE,fileEncoding = "UTF-8",encoding = "UTF-8")
sampledata$lon <- as.numeric(sub(".*,", "", sampledata$Coordinates))
sampledata$lat <- as.numeric(sub(",.*", "", sampledata$Coordinates))
# Turn data frame into sp object
coordinates(sampledata) <- ~lon+lat
proj4string(sampledata) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
# Turn data into spatial object (sf) and transform to RDnew
sampledata <- st_as_sf(sampledata)
sampledata <- st_transform(sampledata, crs =28992)
# Work only with kriging points (not validation or bias data)
sampledata <- sampledata[sampledata$point_id < 200,]
sampledata <- sampledata[sampledata$total < 40,]
sampledata$category_zero <- ifelse(sampledata$total > 0, 1, 0)
hist(sampledata$category_zero)
glitter <- gstat(formula = category_zero ~ 1, data = sampledata)
gzero <- gstat(formula = category_zero ~ 1, data = sampledata)
vgzero <- variogram(gzero) #, boundaries = c(70, 125, 175, 300, 400, 500, 600, 800, 1000, 1500))
vgzero
plot(vgzero, plot.numbers = T)
vgzero <- variogram(gzero, boundaries = c(70, 125, 175, 300, 400, 500, 600, 800, 1000, 1500))
plot(vgzero, plot.numbers = T)
vgzero <- variogram(gzero)# , boundaries = c(70, 125, 175, 300, 400, 500, 600, 800, 1000, 1500))
plot(vgzero, plot.numbers = T)
vgmzero <- vgm(nugget = 0.075, psill = 0.225, range = 1000, model = 'Exp')
vgmzero <- fit.variogram(vgzero, vgmzero)
plot(vgzero, vgmzero)
vgmzero
vgmzero <- vgm(nugget = 0.075, psill = 0.225, range = 1000, model = 'Sph')
vgmzero <- fit.variogram(vgzero, vgmzero)
plot(vgzero, vgmzero)
attr(vgmzero, 'SSErr')
vgmzero <- vgm(nugget = 0.075, psill = 0.225, range = 1000, model = 'Exp')
vgmzero <- fit.variogram(vgzero, vgmzero)
plot(vgzero, vgmzero)
attr(vgmzero, 'SSErr')
